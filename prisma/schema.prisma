// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String     @id @default(uuid())
  email              String     @unique
  password           String
  role               UserRole
  needPasswordChange Boolean @default(true)
  status             UserStatus @default(ACTIVE)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  admin              Admin? //One to one realtion hoile array hobena -> be careful with this 
  doctor             Doctor?
  patient            Patient?

  @@map("users")
}

model Admin {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  profilePhoto  String?
  contactNumber String
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [email], references: [email])

  @@map("admins")
}


//One Doctor can have many specialties 
model Doctor  {
  id String @id @default(uuid())
  name          String
  email         String   @unique
  profilePhoto  String?
  contactNumber String
  address       String?
  registrationNumber String 
  experience Int @default(0)
  gender Gender
  appointmentFee Int 
  qualification String 
  currentWorkingPlace String 
  designation String 
  isDeleted Boolean @default(false)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  doctorSpecialties DoctorSpecialties[]

  user          User     @relation(fields: [email], references: [email])

  @@map("Doctors")
  
}

model Patient {
  id            String   @id @unique @default(uuid())
  email         String   @unique
  name          String
  profilePhoto  String?
  contactNumber String?
  address       String?
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(references: [email], fields: [email])

  @@map("patients")
}


//Specalties er shate doctor specaltier er one-to-many relation so basically a doctor has many specialties
model Specialties {
  id String   @id @unique @default(uuid())
  title String 
  icon String 
  doctorSpecialties DoctorSpecialties[]

  @@map("specialties")
}

model DoctorSpecialties {
  specialtiesId String
  specialities Specialties @relation(fields: [specialtiesId] , references: [id])
  doctorId String 
  doctor Doctor @relation(fields: [doctorId] , references: [id])


  //Composite key to handle many to many
  @@id ([specialtiesId , doctorId])
  @@map("doctor_specialties")
  
}


enum Gender {
  MALE
  FEMALE
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  DOCTOR
  PATIENT
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}
